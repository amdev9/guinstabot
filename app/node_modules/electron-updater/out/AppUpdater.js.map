{
  "version": 3,
  "file": "AppUpdater.js",
  "sourceRoot": "",
  "sources": [
    "../src/AppUpdater.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAY,AAAE,AAAM,AAAQ;;;;AACrC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAE,AAAI,AAAoB,AAAE,AAAK,AAAI,AAAY,AAAE,AAAM,AAAQ;;;;;;AAC1E,AAAO,AAAkB,AAAc,AAAE,AAAM,AAAuB;;;;;;AACtE,AAAO,AAAyC,AAAa,AAAE,AAAM,AAAO;;;;;;AAC5E,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB,AACnD,AAAO,AAAe,AAAM,AAAgB;;;;;;AAE5C,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACrC,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;;;AAClC,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB;;;;;;AACnD,AAAO,AAAE,AAAc,AAAE,AAAM,AAAkB;;;;;;AACjD,AAAO,AAAE,AAAoB,AAAE,AAAM,AAAwB;;;;AAC7D,AAAO,AAA6B,AAUpC,AAAM;;;;;;MAA2B,AAAQ,AAAY;AAmCnD,gBAAY,AAAgD;AAC1D,AAAK,AAAE;AAnCT,AAEG;;;AACI,aAAY,eAAG,AAAI;AAI1B,AAGG;;;;AACI,aAAM,SAAwB,AAAO,OAAC,AAAU,aAAG,AAAI,OAAG,AAAO;AAExD,aAAO,UAAG,AAAI,AAAa,wCAAC,AAAI,AAAC;AASvC,aAAe,kBAAG,AAAK;AAe/B,AAAI,aAAC,AAAE,GAAC,AAAO,SAAG,AAAY,KAAb;AACf,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,qBAAC,AAAM,OAAC,AAAK,AAAC,gBAAU,AAAK,MAAC,AAAK,SAAI,AAAK,MAAC,AAAO,OAAE,AAAC,AAC7D;AAAC,AACH;AAAC,AAAC;AAEF,AAAE,AAAC,YAAO,AAAO,OAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACrC,AAAI,iBAAC,AAAG,MAAS,AAAO,OAAC,AAAU;AACnC,AAAI,iBAAC,AAAa,gBAAG,AAAe,kDAAC,AAAO,AAAE,AAChD;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,iBAAC,AAAG,MAAG,AAAO,QAAC,AAAU,AAAC,YAAC,AAAG;AAClC,AAAc,iFAAC,AAAY,eAAG,AAAI,AAAoB,AAAE;AACxD,AAAI,iBAAC,AAAa,sEAAuB,AAAO;AAC9C,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAG,IAAC,AAAO,AAAE,AAAC,WAAC,AAAC;AACvB,AAAE,AAAC,wBAAC,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,6BAAC,AAAM,OAAC,AAAI,KAAC,AAAc,AAAC,AAClC;AAAC;AACD,AAAO,AAAE,AACX;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAE,AAAC,wBAAC,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,6BAAC,AAAM,OAAC,AAAI,KAAC,AAAoB,AAAC,AACxC;AAAC;AACD,AAAI,yBAAC,AAAG,IAAC,AAAE,GAAC,AAAO,SAAE,AAAO,AAAC,AAC/B;AAAC,AACH;AAAC,AAAC,AACJ,aAduB,AAAI,AAAe;AAczC;AAED,AAAE,AAAC,YAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAI,iBAAC,AAAU,WAAC,AAAO,AAAC,AAC1B;AAAC,AACH;AAAC;AApDD,QAAI,AAAgB,iBAAC,AAAoB;AACvC,AAAI,aAAC,AAAa,gBAAG,AAAI;AACzB,AAAI,aAAC,AAAoB,uBAAI,AAAK,AACpC;AAAC;AAmDD,AAAwD;AACxD,AAAU;AACR,AAAM,eAAC,AAA4B,AACrC;AAAC;AAED,AAAU,eAAC,AAAoC;AAC7C,AAAoE;AACpE,YAAI,AAAqB;AACzB,AAAE,AAAC,YAAC,OAAO,AAAK,UAAK,AAAQ,AAAC,UAAC,AAAC;AAC9B,AAAM,qBAAG,AAAI,AAAe,kEAAC,EAAC,AAAQ,UAAE,AAAS,WAAE,AAAG,KAAE,AAAK,AAAC,AAAC,AACjE;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,qBAAG,AAAY,aAAC,AAAK,AAAC,AAC9B;AAAC;AACD,AAAI,aAAC,AAAa,gBAAG,AAAe,kDAAC,AAAO,QAAC,AAAM,AAAC,AACtD;AAAC;AAED,AAAe;AACb,YAAI,AAAsB,yBAAG,AAAI,KAAC,AAAsB;AACxD,AAAE,AAAC,YAAC,AAAsB,0BAAI,AAAI,AAAC,MAAC,AAAC;AACnC,AAAM,mBAAC,AAAsB,AAC/B;AAAC;AAED,AAAsB,iCAAG,AAAI,KAAC,AAAgB,AAAE;AAChD,AAAI,aAAC,AAAsB,yBAAG,AAAsB;AACpD,cAAM,AAAc,iBAAG,MAAM,AAAI,KAAC,AAAsB,yBAAG,AAAI;AAC/D,AAAsB,+BACnB,AAAI,KAAC,AAAc,AAAC,gBACpB,AAAK,MAAC,AAAc,AAAC;AACxB,AAAM,eAAC,AAAsB,AAC/B;AAAC;AAEa,AAAgB,oBAAtB,AAAK;;;;AACX,kBAAM,AAAI,MAAC,AAAa;AAExB,AAAE,AAAC,gBAAC,AAAI,MAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,sBAAC,AAAM,OAAC,AAAI,KAAC,AAAqB,AAAC,AACzC;AAAC;AAED,AAAI,kBAAC,AAAI,KAAC,AAAqB,AAAC;AAChC,gBAAI,AAAC;AACH,AAAM,uBAAC,MAAM,AAAI,MAAC,AAAiB,AAAE,AACvC;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAI,sBAAC,AAAI,KAAC,AAAO,SAAE,AAAC,AAAE,gCAA6B,CAAC,AAAC,EAAC,AAAK,SAAI,AAAC,AAAC,GAAC,AAAQ,AAAE,UAAE,AAAC;AAC/E,sBAAM,AAAC,AACT;AAAC,AACH;;AAAC;AAEa,AAAiB,qBAAvB,AAAK;;;;AACX,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC/B,AAAI,uBAAC,AAAa,uBAAQ,AAAgB,AAAE,mBAAC,AAAI;AAAC,AAAE,2BAAI,AAAY,aAAC,AAAE,AAAC,AAAC,AAC3E;iBADuB,AAAI;AAC1B;AAED,kBAAM,AAAM,SAAG,MAAM,AAAI,OAAC,AAAa;AACvC,AAAM,mBAAC,AAAiB,kBAAC,AAAI,OAAC,AAAc,AAAC;AAC7C,kBAAM,AAAW,cAAG,MAAM,AAAM,OAAC,AAAgB,AAAE;AAEnD,kBAAM,AAAa,gBAAG,AAAY,uCAAC,AAAW,YAAC,AAAO,AAAC;AACvD,AAAE,AAAC,gBAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,sBAAM,IAAI,AAAK,AAAC,2EAAqE,AAAa,aAAE,AAAC,AACvG;AAAC;AAED,kBAAM,AAAoB,uBAAG,AAAI,OAAC,AAAG,IAAC,AAAU,AAAE;AAClD,kBAAM,AAAc,iBAAG,AAAY,uCAAC,AAAoB,AAAC;AACzD,AAAE,AAAC,gBAAC,AAAc,kBAAI,AAAI,AAAC,MAAC,AAAC;AAC3B,sBAAM,IAAI,AAAK,AAAC,mDAA6C,AAAc,cAAE,AAAC,AAChF;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAoB,oCAAC,AAAa,eAAE,AAAc,AAAC,AAAC,iBAAC,AAAC;AACzD,AAAI,uBAAC,AAAe,kBAAG,AAAK;AAC5B,AAAE,AAAC,oBAAC,AAAI,OAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,2BAAC,AAAM,OAAC,AAAI,AAAC,2BAAsB,AAAoB,0DAAsC,AAAW,YAAC,AAAO,OAAG,AAAC,AAC1H;AAAC;AACD,AAAI,uBAAC,AAAI,KAAC,AAAsB,wBAAE,AAAW,AAAC;AAC9C,AAAM;AACJ,AAAW,iCAAE,AAAW,AACzB,AACH;AAHS;AAGR;AAED,kBAAM,AAAQ,WAAG,MAAM,AAAM,OAAC,AAAa,cAAC,AAAW,AAAC;AAExD,AAAI,mBAAC,AAAe,kBAAG,AAAI;AAC3B,AAAI,mBAAC,AAAW,cAAG,AAAW;AAC9B,AAAI,mBAAC,AAAQ,WAAG,AAAQ;AAExB,AAAI,mBAAC,AAAiB,kBAAC,AAAW,aAAE,AAAQ,AAAC;AAE7C,AAA8B;AAC9B,AAAM;AACJ,AAAW,6BAAE,AAAW;AACxB,AAAQ,0BAAE,AAAQ;AAClB,AAAe,iCAAE,AAAI,OAAC,AAAY,eAAG,AAAI,OAAC,AAAc,AAAE,mBAAG,AAAI,AAClE,AACH;AALS;;AAKR;AAES,AAAiB,sBAAC,AAAwB,aAAE,AAAkB;AACtE,AAAE,AAAC,YAAC,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,iBAAC,AAAM,OAAC,AAAI,AAAC,sBAAiB,AAAW,YAAC,AAAO,iBAAU,AAAQ,SAAC,AAAG,GAAG,AAAC,AACjF;AAAC;AACD,AAAI,aAAC,AAAI,KAAC,AAAkB,oBAAE,AAAW,AAAC,AAC5C;AAAC;AAED,AAGG;;;;AACG,AAAc,kBAApB,AAAK;;;;AACH,kBAAM,AAAW,cAAG,AAAI,OAAC,AAAW;AACpC,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAQ;AAC9B,AAAE,AAAC,gBAAC,AAAW,eAAI,AAAI,QAAI,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AAC5C,sBAAM,AAAO,UAAG,AAA2B;AAC3C,sBAAM,AAAK,QAAG,IAAI,AAAK,MAAC,AAAO,AAAC;AAChC,AAAI,uBAAC,AAAI,KAAC,AAAO,SAAE,AAAK,OAAE,AAAO,AAAC;AAClC,sBAAM,AAAK,AACb;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,uBAAC,AAAM,OAAC,AAAI,AAAC,gCAA2B,AAAQ,SAAC,AAAG,GAAE,AAAC,AAC7D;AAAC;AAED,gBAAI,AAAC;AACH,AAAM,uBAAC,MAAM,AAAI,OAAC,AAAgB,iBAAC,AAAW,aAAE,AAAQ,AAAC,AAC3D;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAI,uBAAC,AAAa,cAAC,AAAC,AAAC;AACrB,sBAAM,AAAC,AACT;AAAC,AACH;;AAAC;AAES,AAAa,kBAAC,AAAQ;AAC9B,AAAI,aAAC,AAAI,KAAC,AAAO,SAAE,AAAC,GAAE,CAAC,AAAC,EAAC,AAAK,SAAI,AAAC,AAAC,GAAC,AAAQ,AAAE,AAAC,AAClD;AAAC;AAMK,AAAgB,oBAAtB,AAAK;;;;AACH,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAoB,wBAAI,AAAI,AAAC,MAAC,AAAC;AACtC,AAAI,uBAAC,AAAoB,uBAAG,AAAI,MAAC,AAAI,KAAC,AAAO,QAAC,AAAa,eAAE,AAAgB,AAAC,AAChF;AAAC;AACD,AAAM,mBAAC,AAAQ,2CAAC,MAAM,AAAQ,8CAAC,AAAI,OAAC,AAAoB,sBAAE,AAAO,AAAC,AAAC,AACrE;;AAAC,AACF;;;AAED,sBAAsB,AAAgF;AACpG,AAAE,AAAC,QAAC,OAAO,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AAC7B,cAAM,IAAI,AAAK,MAAC,AAAyC,AAAC,AAC5D;AAAC;AAED,UAAM,AAAQ,WAA0B,AAAK,KAAC,AAAQ;AACtD,AAAM,AAAC,YAAC,AAAQ,AAAC,AAAC,AAAC;AACjB,aAAK,AAAQ;AACX,AAAM,mBAAC,AAAI,AAAc,+DAAgB,AAAI,AAAC;AAChD,aAAK,AAAI;AACP,AAAM;AACJ,AAAG,AAAE,iDAAwC,AAAK,KAAC,AAAM,UAAI,AAAE,EAAE;AACjE,AAAO,yBAAc,AAAK,KAAC,AAAO,WAAI,AAAE,AACzC,AAAC;AAH+C,aAA1C,AAAI,AAAe;AAI5B,aAAK,AAAS;AACZ,AAAM,mBAAC,AAAI,AAAe,kEAAuB,AAAI,AAAC;AACxD,aAAK,AAAS;AACZ,AAAM,mBAAC,AAAI,AAAe,kEAAiB,AAAI,AAAC;AAClD;AACE,kBAAM,IAAI,AAAK,AAAC,+BAAyB,AAAQ,QAAE,AAAC,AACxD,AAAC,AACH;;AAAC",
  "sourcesContent": [
    "import { EventEmitter } from \"events\"\nimport * as path from \"path\"\nimport { gt as isVersionGreaterThan, valid as parseVersion } from \"semver\"\nimport { RequestHeaders, executorHolder } from \"electron-builder-http\"\nimport { Provider, UpdateCheckResult, FileInfo, UpdaterSignal } from \"./api\"\nimport { BintrayProvider } from \"./BintrayProvider\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { BintrayOptions, PublishConfiguration, GithubOptions, S3Options, GenericServerOptions, VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { readFile } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport { GenericProvider } from \"./GenericProvider\"\nimport { GitHubProvider } from \"./GitHubProvider\"\nimport { ElectronHttpExecutor } from \"./electronHttpExecutor\"\nimport \"source-map-support/register\"\n\nexport interface Logger {\n  info(message?: any): void\n\n  warn(message?: any): void\n\n  error(message?: any): void\n}\n\nexport abstract class AppUpdater extends EventEmitter {\n  /**\n   * Automatically download an update when it is found.\n   */\n  public autoDownload = true\n\n  public requestHeaders: RequestHeaders | null\n\n  /**\n   * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\n   * Set it to `null` if you would like to disable a logging feature.\n   */\n  public logger: Logger | null = (<any>global).__test_app ? null : console\n\n  public readonly signals = new UpdaterSignal(this)\n\n  private _appUpdateConfigPath: string | null\n\n  set updateConfigPath(value: string | null) {\n    this.clientPromise = null\n    this._appUpdateConfigPath =  value\n  }\n\n  protected updateAvailable = false\n\n  private clientPromise: Promise<Provider<any>> | null\n\n  private readonly untilAppReady: Promise<boolean>\n  private checkForUpdatesPromise: Promise<UpdateCheckResult> | null\n\n  protected readonly app: any\n\n  protected versionInfo: VersionInfo | null\n  private fileInfo: FileInfo | null\n\n  constructor(options: PublishConfiguration | null | undefined) {\n    super()\n\n    this.on(\"error\", (error: Error) => {\n      if (this.logger != null) {\n        this.logger.error(`Error: ${error.stack || error.message}`)\n      }\n    })\n\n    if ((<any>global).__test_app != null) {\n      this.app = (<any>global).__test_app\n      this.untilAppReady = BluebirdPromise.resolve()\n    }\n    else {\n      this.app = require(\"electron\").app\n      executorHolder.httpExecutor = new ElectronHttpExecutor()\n      this.untilAppReady = new BluebirdPromise(resolve => {\n        if (this.app.isReady()) {\n          if (this.logger != null) {\n            this.logger.info(\"App is ready\")\n          }\n          resolve()\n        }\n        else {\n          if (this.logger != null) {\n            this.logger.info(\"Wait for app ready\")\n          }\n          this.app.on(\"ready\", resolve)\n        }\n      })\n    }\n\n    if (options != null) {\n      this.setFeedURL(options)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n  getFeedURL(): string | null | undefined {\n    return \"Deprecated. Do not use it.\"\n  }\n\n  setFeedURL(value: PublishConfiguration | string) {\n    // https://github.com/electron-userland/electron-builder/issues/1105\n    let client: Provider<any>\n    if (typeof value === \"string\") {\n      client = new GenericProvider({provider: \"generic\", url: value})\n    }\n    else {\n      client = createClient(value)\n    }\n    this.clientPromise = BluebirdPromise.resolve(client)\n  }\n\n  checkForUpdates(): Promise<UpdateCheckResult> {\n    let checkForUpdatesPromise = this.checkForUpdatesPromise\n    if (checkForUpdatesPromise != null) {\n      return checkForUpdatesPromise\n    }\n\n    checkForUpdatesPromise = this._checkForUpdates()\n    this.checkForUpdatesPromise = checkForUpdatesPromise\n    const nullizePromise = () => this.checkForUpdatesPromise = null\n    checkForUpdatesPromise\n      .then(nullizePromise)\n      .catch(nullizePromise)\n    return checkForUpdatesPromise\n  }\n\n  private async _checkForUpdates(): Promise<UpdateCheckResult> {\n    await this.untilAppReady\n\n    if (this.logger != null) {\n      this.logger.info(\"Checking for update\")\n    }\n\n    this.emit(\"checking-for-update\")\n    try {\n      return await this.doCheckForUpdates()\n    }\n    catch (e) {\n      this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`)\n      throw e\n    }\n  }\n\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\n    if (this.clientPromise == null) {\n      this.clientPromise = this.loadUpdateConfig().then(it => createClient(it))\n    }\n\n    const client = await this.clientPromise\n    client.setRequestHeaders(this.requestHeaders)\n    const versionInfo = await client.getLatestVersion()\n\n    const latestVersion = parseVersion(versionInfo.version)\n    if (latestVersion == null) {\n      throw new Error(`Latest version (from update server) is not valid semver version: \"${latestVersion}`)\n    }\n\n    const currentVersionString = this.app.getVersion()\n    const currentVersion = parseVersion(currentVersionString)\n    if (currentVersion == null) {\n      throw new Error(`App version is not valid semver version: \"${currentVersion}`)\n    }\n\n    if (!isVersionGreaterThan(latestVersion, currentVersion)) {\n      this.updateAvailable = false\n      if (this.logger != null) {\n        this.logger.info(`Update for version ${currentVersionString} is not available (latest version: ${versionInfo.version})`)\n      }\n      this.emit(\"update-not-available\", versionInfo)\n      return {\n        versionInfo: versionInfo,\n      }\n    }\n\n    const fileInfo = await client.getUpdateFile(versionInfo)\n\n    this.updateAvailable = true\n    this.versionInfo = versionInfo\n    this.fileInfo = fileInfo\n\n    this.onUpdateAvailable(versionInfo, fileInfo)\n\n    //noinspection ES6MissingAwait\n    return {\n      versionInfo: versionInfo,\n      fileInfo: fileInfo,\n      downloadPromise: this.autoDownload ? this.downloadUpdate() : null,\n    }\n  }\n\n  protected onUpdateAvailable(versionInfo: VersionInfo, fileInfo: FileInfo) {\n    if (this.logger != null) {\n      this.logger.info(`Found version ${versionInfo.version} (url: ${fileInfo.url})`)\n    }\n    this.emit(\"update-available\", versionInfo)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  async downloadUpdate(): Promise<any> {\n    const versionInfo = this.versionInfo\n    const fileInfo = this.fileInfo\n    if (versionInfo == null || fileInfo == null) {\n      const message = \"Please check update first\"\n      const error = new Error(message)\n      this.emit(\"error\", error, message)\n      throw error\n    }\n\n    if (this.logger != null) {\n      this.logger.info(`Downloading update from ${fileInfo.url}`)\n    }\n\n    try {\n      return await this.doDownloadUpdate(versionInfo, fileInfo)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      throw e\n    }\n  }\n\n  protected dispatchError(e: Error) {\n    this.emit(\"error\", e, (e.stack || e).toString())\n  }\n\n  protected async abstract doDownloadUpdate(versionInfo: VersionInfo, fileInfo: FileInfo): Promise<any>\n\n  abstract quitAndInstall(): void\n\n  async loadUpdateConfig() {\n    if (this._appUpdateConfigPath == null) {\n      this._appUpdateConfigPath = path.join(process.resourcesPath, \"app-update.yml\")\n    }\n    return safeLoad(await readFile(this._appUpdateConfigPath, \"utf-8\"))\n  }\n}\n\nfunction createClient(data: string | PublishConfiguration | BintrayOptions | GithubOptions | S3Options) {\n  if (typeof data === \"string\") {\n    throw new Error(\"Please pass PublishConfiguration object\")\n  }\n\n  const provider = (<PublishConfiguration>data).provider\n  switch (provider) {\n    case \"github\":\n      return new GitHubProvider(<GithubOptions>data)\n    case \"s3\":\n      return new GenericProvider(<GenericServerOptions>{\n        url: `https://s3.amazonaws.com/${(<S3Options>data).bucket || \"\"}`,\n        channel: (<S3Options>data).channel || \"\"\n      })\n    case \"generic\":\n      return new GenericProvider(<GenericServerOptions>data)\n    case \"bintray\":\n      return new BintrayProvider(<BintrayOptions>data)\n    default:\n      throw new Error(`Unsupported provider: ${provider}`)\n  }\n}"
  ]
}
