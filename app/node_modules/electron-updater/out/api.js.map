{
  "version": 3,
  "file": "api.js",
  "sourceRoot": "",
  "sources": [
    "../src/api.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;AAcE,AAAiB,sBAAC,AAA4B;AAC5C,AAAI,aAAC,AAAc,iBAAG,AAAK,AAC7B;AAAC,AAKF;;6BAED,AAAuF,AACvF,AAAM;;;AACJ,AAAM,AAAC,oBAAS,AAAoB,AAAE,sBAAE,AAC1C;AAAC;AAED;AACE,AAAM,WAAC,AAAkB,AAAE,yBAAK,AAAQ,WAAG,AAAM,SAAG,AAAE,AACxD;AAAC,AAED,AAAM;8BAA+B,AAAe;AAClD,AAAM,AAAC,cAAG,AAAO,UAAG,AAAoB,AAAE,sBAAE,AAC9C;AAAC,AAED,AAAM;;AACJ,AAAM,WAAC,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAQ,AAC9D;AAAC,AAED,AAAM;4BAA6B,AAAe;AAChD,AAAM,AAAC,cAAG,AAAO,WAAI,AAAkB,AAAE,yBAAK,AAAQ,WAAG,AAAM,SAAG,AAAK,KAAE,AAC3E;AAAC,AASD,AAAM;AAAC,MAAM,AAAiB,gDAAG,AAAmB,AAEpD,AAAM;;AACJ,gBAAoB,AAAqB;AAArB,aAAO,UAAP,AAAO,AAAc,AACzC;AAAC;AAED,AAAQ,aAAC,AAAqC;AAC5C,AAAU,mBAAC,AAAI,KAAC,AAAO,SAAE,AAAiB,mBAAE,AAAO,AAAC,AACtD;AAAC;AAED,AAAgB,qBAAC,AAAoC;AACnD,AAAU,mBAAC,AAAI,KAAC,AAAO,SAAE,AAAmB,qBAAE,AAAO,AAAC,AACxD;AAAC,AACF;;;AAED,MAAM,AAAU,aAAG,AAAK;AAExB,oBAAoB,AAAqB,SAAE,AAAa,OAAE,AAAiB;AACzE,AAAE,AAAC,QAAC,AAAU,AAAC,YAAC,AAAC;AACf,AAAO,gBAAC,AAAE,GAAC,AAAK,OAAE,AAAU;;AAAG,AAAW;;;AACxC,AAAO,oBAAC,AAAG,IAAC,AAAO,SAAE,AAAK,OAAE,AAAI,AAAC;AACjC,AAAO,oBAAC,AAAK,MAAC,AAAI,MAAE,AAAI,AAAC,AAC3B;AAAC,AAAC,AACJ;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAAO,gBAAC,AAAE,GAAC,AAAK,OAAE,AAAO,AAAC,AAC5B;AAAC,AACH;AAAC",
  "sourcesContent": [
    "import { VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { EventEmitter } from \"events\"\nimport { RequestHeaders } from \"electron-builder-http\"\nimport { ProgressInfo } from \"electron-builder-http/out/ProgressCallbackTransform\"\n\nexport interface FileInfo {\n  readonly name: string\n  readonly url: string\n  readonly sha2?: string\n}\n\nexport abstract class Provider<T extends VersionInfo> {\n  protected requestHeaders: RequestHeaders | null\n\n  setRequestHeaders(value: RequestHeaders | null) {\n    this.requestHeaders = value\n  }\n\n  abstract getLatestVersion(): Promise<T>\n\n  abstract getUpdateFile(versionInfo: T): Promise<FileInfo>\n}\n\n// due to historical reasons for windows we use channel name without platform specifier\nexport function getDefaultChannelName() {\n  return `latest${getChannelFilePrefix()}`\n}\n\nfunction getChannelFilePrefix() {\n  return getCurrentPlatform() === \"darwin\" ? \"-mac\" : \"\"\n}\n\nexport function getCustomChannelName(channel: string) {\n  return `${channel}${getChannelFilePrefix()}`\n}\n\nexport function getCurrentPlatform () {\n  return process.env.TEST_UPDATER_PLATFORM || process.platform\n}\n\nexport function getChannelFilename(channel: string) {\n  return `${channel}.${getCurrentPlatform() === \"darwin\" ? \"json\" : \"yml\"}`\n}\n\nexport interface UpdateCheckResult {\n  readonly versionInfo: VersionInfo\n  readonly fileInfo?: FileInfo\n\n  readonly downloadPromise?: Promise<any> | null\n}\n\nexport const DOWNLOAD_PROGRESS = \"download-progress\"\n\nexport class UpdaterSignal {\n  constructor(private emitter: EventEmitter) {\n  }\n\n  progress(handler: (info: ProgressInfo) => void) {\n    addHandler(this.emitter, DOWNLOAD_PROGRESS, handler)\n  }\n\n  updateDownloaded(handler: (info: VersionInfo) => void) {\n    addHandler(this.emitter, \"update-downloaded\", handler)\n  }\n}\n\nconst isLogEvent = false\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: Function) {\n  if (isLogEvent) {\n    emitter.on(event, function (...args: any[]) {\n      console.log(\"%s %s\", event, args)\n      handler.apply(null, args)\n    })\n  }\n  else {\n    emitter.on(event, handler)\n  }\n}"
  ]
}
