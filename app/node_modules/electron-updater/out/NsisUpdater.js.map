{
  "version": 3,
  "file": "NsisUpdater.js",
  "sourceRoot": "",
  "sources": [
    "../src/NsisUpdater.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { spawn } from \"child_process\"\nimport * as path from \"path\"\nimport { tmpdir } from \"os\"\nimport { download, DownloadOptions } from \"electron-builder-http\"\nimport { DOWNLOAD_PROGRESS, FileInfo } from \"./api\"\nimport { PublishConfiguration, VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { mkdtemp, remove } from \"fs-extra-p\"\nimport \"source-map-support/register\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\n\nexport class NsisUpdater extends AppUpdater {\n  private setupPath: string | null\n  private quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  constructor(options?: PublishConfiguration) {\n    super(options)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  protected async doDownloadUpdate(versionInfo: VersionInfo, fileInfo: FileInfo) {\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: this.requestHeaders || undefined,\n      cancellationToken: new CancellationToken(),\n      sha2: fileInfo == null ? null : fileInfo.sha2,\n    }\n\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    const logger = this.logger\n    const tempDir = await mkdtemp(`${path.join(tmpdir(), \"up\")}-`)\n    const tempFile = path.join(tempDir, fileInfo.name)\n    try {\n      await download(fileInfo.url, tempFile, downloadOptions)\n    }\n    catch (e) {\n      try {\n        await remove(tempDir)\n      }\n      catch (ignored) {\n        // ignored\n      }\n\n      throw e\n    }\n\n    if (logger != null) {\n      logger.info(`New version ${this.versionInfo!.version} has been downloaded to ${tempFile}`)\n    }\n\n    this.setupPath = tempFile\n    this.addQuitHandler()\n    this.emit(\"update-downloaded\", this.versionInfo)\n    return tempFile\n  }\n\n  private addQuitHandler() {\n    if (this.quitHandlerAdded) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.on(\"quit\", () => {\n      if (this.logger != null) {\n        this.logger.info(\"Auto install update on quit\")\n      }\n      this.install(true)\n    })\n  }\n\n  quitAndInstall(): void {\n    if (this.install(false)) {\n      this.app.quit()\n    }\n  }\n\n  private install(isSilent: boolean): boolean {\n    if (this.quitAndInstallCalled) {\n      return false\n    }\n\n    const setupPath = this.setupPath\n    if (!this.updateAvailable || setupPath == null) {\n      const message = \"No update available, can't quit and install\"\n      this.emit(\"error\", new Error(message), message)\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    const args = [\"--updated\"]\n    if (isSilent) {\n      args.push(\"/S\")\n    }\n    const spawnOptions = {\n      detached: true,\n      stdio: \"ignore\",\n    }\n\n    try {\n      spawn(setupPath, args, spawnOptions)\n        .unref()\n    }\n    catch (e) {\n      // yes, such errors dispatched not as error event\n      // https://github.com/electron-userland/electron-builder/issues/1129\n      if ((<any>e).code === \"UNKNOWN\") {\n        if (this.logger != null) {\n          this.logger.info(\"UNKNOWN error code on spawn, will be executed again using elevate\")\n        }\n\n        try {\n          spawn(path.join(process.resourcesPath, \"elevate.exe\"), [setupPath].concat(args), spawnOptions)\n            .unref()\n        }\n        catch (e) {\n          this.dispatchError(e)\n        }\n      }\n      else {\n        this.dispatchError(e)\n      }\n    }\n\n    return true\n  }\n}"
  ]
}
