{
  "version": 3,
  "file": "GenericProvider.js",
  "sourceRoot": "",
  "sources": [
    "../src/GenericProvider.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Provider, FileInfo, getDefaultChannelName, getCustomChannelName, getChannelFilename, getCurrentPlatform } from \"./api\"\nimport { GenericServerOptions, UpdateInfo } from \"electron-builder-http/out/publishOptions\"\nimport * as url from \"url\"\nimport * as path from \"path\"\nimport { RequestOptions } from \"http\"\nimport { HttpError, request } from \"electron-builder-http\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\n\nexport class GenericProvider extends Provider<UpdateInfo> {\n  private readonly baseUrl = url.parse(this.configuration.url)\n  private readonly channel = this.configuration.channel ? getCustomChannelName(this.configuration.channel) : getDefaultChannelName()\n\n  constructor(private readonly configuration: GenericServerOptions) {\n    super()\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    let result: UpdateInfo | null = null\n    const channelFile = getChannelFilename(this.channel)\n    const pathname = path.posix.resolve(this.baseUrl.pathname || \"/\", channelFile)\n    try {\n      const options: RequestOptions = {\n        hostname: this.baseUrl.hostname,\n        path: `${pathname}${this.baseUrl.search || \"\"}`,\n        protocol: this.baseUrl.protocol,\n        headers: this.requestHeaders || undefined\n      }\n      if (this.baseUrl.port != null) {\n        options.port = parseInt(this.baseUrl.port, 10)\n      }\n      result = await request<UpdateInfo>(options, new CancellationToken())\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    validateUpdateInfo(result)\n    if (getCurrentPlatform() === \"darwin\") {\n      (<any>result).releaseJsonUrl = url.format(Object.assign({}, this.baseUrl, {pathname: pathname}))\n    }\n    return result\n  }\n\n  async getUpdateFile(versionInfo: UpdateInfo): Promise<FileInfo> {\n    if (getCurrentPlatform() === \"darwin\") {\n      return <any>versionInfo\n    }\n\n    return {\n      name: path.posix.basename(versionInfo.path),\n      url: url.format(Object.assign({}, this.baseUrl, {pathname: path.posix.resolve(this.baseUrl.pathname || \"/\", versionInfo.path)})),\n      sha2: versionInfo.sha2,\n    }\n  }\n}\n\n// sha2 is required only for windows because on macOS update is verified by Squirrel.Mac\nexport function validateUpdateInfo(info: UpdateInfo) {\n  if (getCurrentPlatform() === \"darwin\") {\n    if ((<any>info).url == null) {\n      throw new Error(\"Update info doesn't contain url\")\n    }\n    return\n  }\n\n  if (info.sha2 == null ) {\n    throw new Error(`Update info doesn't contain sha2 checksum: ${JSON.stringify(info, null, 2)}`)\n  }\n  if (info.path == null) {\n    throw new Error(`Update info doesn't contain file path: ${JSON.stringify(info, null, 2)}`)\n  }\n}"
  ]
}
